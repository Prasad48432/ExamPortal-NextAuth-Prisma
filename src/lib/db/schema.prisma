generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                      String               @id @default(cuid())
    name                    String?
    emailVerified           DateTime?
    email                   String?              @unique
    image                   String?
    totalExamsTaken         Int?                 @default(0)
    totalQuestionsAttempted Int?                 @default(0)
    totalCorrect            Int?                 @default(0)
    totalWrong              Int?                 @default(0)
    totalUnanswered         Int?                 @default(0)
    totalTimeSpent          Int?                 @default(0)
    totalAccuracy           Float?               @default(0)
    createdAt               DateTime             @default(now())
    updatedAt               DateTime             @updatedAt
    accounts                Account[]
    exams                   ExamResult[]
    sessions                Session[]
    scheduledExams          SavedExam[] // New relation
    bookmarkedQuestions     BookmarkedQuestion[] // New relation
}

model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exam {
    id             String       @id @default(uuid())
    title          String
    description    String
    duration       Int
    totalQuestions Int
    passingScore   Int
    createdAt      DateTime     @default(now())
    results        ExamResult[]
    questions      Question[]
    savedBy        SavedExam[]
}

model ExamResult {
    id            String    @id @default(uuid())
    userId        String
    examId        String
    score         Float
    answers       Json?
    questions     Json?
    examPassed    Boolean   @default(false)
    status        String
    securityCheck Boolean   @default(false)
    completedAt   DateTime?
    startedAt     DateTime?
    timeSpent     Int       @default(0)
    createdAt     DateTime  @default(now())
    exam          Exam      @relation(fields: [examId], references: [id], onDelete: Cascade)
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
    id            String               @id @default(uuid())
    examId        String
    questionText  String
    options       String[]
    correctAnswer Int
    explanation   String?
    reference     String?
    questionImage String?
    createdAt     DateTime             @default(now())
    exam          Exam                 @relation(fields: [examId], references: [id], onDelete: Cascade)
    bookmarkedBy  BookmarkedQuestion[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model SavedExam {
    id     String @id @default(uuid())
    userId String
    examId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)
}

model BookmarkedQuestion {
    id         String   @id @default(uuid())
    userId     String
    questionId String
    examId     String   @default("exam")
    user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
