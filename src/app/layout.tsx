import type { Metadata } from "next";
import { Montserrat, Bricolage_Grotesque } from "next/font/google";
import "@/app/globals.css";
import { ReactNode } from "react";
import { ThemeProvider } from "@/components/ThemeProvider";
import { auth } from "@/lib/auth";
import Navbar from "@/components/navbar";
import { Toaster } from "sonner";
import Footer from "@/components/footer";

const montserrat = Montserrat({
  variable: "--font-montserrat",
  subsets: ["latin"],
});

const bricolage = Bricolage_Grotesque({
  variable: "--font-bricolage",
  subsets: ["latin"],
});

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type LayoutProps = {
  children: ReactNode;
};
const Layout = async ({ children }: LayoutProps) => {
  const session = await auth();
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <style
          dangerouslySetInnerHTML={{
            __html: `
          .theme-init {
            transition: none !important;
            opacity: 0 !important;
          }
          html:not(.theme-init) {
            opacity: 1;
            transition: opacity 0.3s ease;
          }
        `,
          }}
        />
        <script
          dangerouslySetInnerHTML={{
            __html: `
          document.documentElement.classList.add('theme-init');
          try {
            if (localStorage.getItem('theme') === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
              document.documentElement.classList.add('dark');
            } else {
              document.documentElement.classList.remove('dark');
            }
            setTimeout(function() {
              document.documentElement.classList.remove('theme-init');
            }, 10);
          } catch (e) {}
        `,
          }}
        />
      </head>
      <body
        className={`${montserrat.variable} ${bricolage.variable} antialiased montserrat`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
          storageKey="theme"
        >
          <Toaster richColors position="top-center" />
          <Navbar session={session} />
          {children}
          <Footer />
        </ThemeProvider>
      </body>
    </html>
  );
};

export { metadata };
export default Layout;
